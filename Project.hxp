package;

import hxp.*;
import lime.tools.*;

using StringTools;

/**
 * This is the main project file for TechNotDrip Engine.
 *
 * This works exactly like an Project.xml but in Haxe Syntax.
 */
class Project extends HXProject
{
	/**
	 * Whether the game should be compiled into dox instead.
	 *
	 * Developers should set this to **false** immediately after use.
	 *
	 * @default false
	 */
	public final DOX_GENERATION:Bool = false;

	public function new()
	{
		super();

		setenv('HAXEPATH', './'); // Fixes an issue for haxelibs that use native C++ files until Haxe 5 releases.

		setupApplicationSettings();
		setupWindowSettings();
		setupPathSettings();
		setupHaxelibs();
		setupHaxeDefines();
		setupHaxeFlags();
	}

	public function setupApplicationSettings():Void
	{
		meta.title = 'Friday Night Funkin\': TechNotDrip Engine';
		meta.version = '0.1.0';
		meta.packageName = 'com.technotdrip.tilnotdrip';
		meta.company = 'TilNotDrip';

		app.file = 'TechNotDrip';
		app.main = 'Main';
		app.preloader = 'flixel.system.FlxPreloader';
	}

	public function setupWindowSettings():Void
	{
		window.width = 1280;
		window.height = 720;
		window.background = 0;
		window.hardware = true;
		window.vsync = false;

		if (platformType == WEB)
		{
			window.resizable = true;
		}

		if (platformType == DESKTOP)
		{
			window.orientation = LANDSCAPE;
			window.fullscreen = false;
			window.resizable = true;
		}

		if (platformType == MOBILE)
		{
			window.orientation = LANDSCAPE;
			window.fullscreen = false;
			window.resizable = false;
			window.width = 0;
			window.height = 0;
		}
	}

	public function setupPathSettings():Void
	{
		app.path = 'export/' + ((debug) ? 'debug' : 'release');

		var excludeList:Array<String> = [];
		excludeList.push((platformType == WEB) ? 'ogg' : 'mp3');

		// TODO: Maybe scan the entire assets folder instead like base fnf.
		includeAssets("assets", "assets", ['*'], excludeList);

		addIcon('extras/appicons/icon16.png', 16);
		addIcon('extras/appicons/icon32.png', 32);
		addIcon('extras/appicons/icon64.png', 64);
		addIcon('extras/appicons/icon.png');

		sources.push('src');
	}

	public function setupHaxelibs():Void
	{
		addHaxelib('lime', '8.2.1');
		addHaxelib('openfl', '9.4.0');
		addHaxelib('flixel', '5.8.0');
		addHaxelib('flixel-addons', '3.2.3');
		addHaxelib('hxcpp-debug-server', '1.2.4', debug);
	}

	public function setupHaxeDefines():Void
	{
		addHaxeDefine('doc-gen', DOX_GENERATION);
		addHaxeDefine('FLX_NO_DEBUG', !debug);
		addHaxeDefine('FLX_NO_FOCUS_LOST_SCREEN');
		addHaxeDefine('FLX_NO_HEALTH');
		addHaxeDefine('FLX_NO_KEYBOARD', platformType == MOBILE);
		addHaxeDefine('FLX_NO_MOUSE', platformType == MOBILE);
		addHaxeDefine('FLX_NO_TOUCH', platformType != MOBILE);
		addHaxeDefine('message.reporting', 'pretty');
		addHaxeDefine('NAPE_RELEASE_BUILD', !debug);
	}

	public function setupHaxeFlags():Void
	{
		addHaxeFlag('-dce no');
		addHaxeFlag("--macro include('funkin')");
		addHaxeFlag("--macro include('flixel', true, ['flixel.addons.editors.spine.*', 'flixel.addons.nape.*', 'flixel.system.macros.*'])");
		addHaxeFlag("--macro addMetadata('@:build(funkin.macros.ZProperty.build())', 'flixel.FlxBasic')");
		addHaxeFlag('--no-output', DOX_GENERATION);
		addHaxeFlag('-xml docs/dox/' + Std.string(target).toLowerCase() + '.xml', DOX_GENERATION);
	}

	public function addHaxelib(name:String, version:String = '', conditions:Bool = true):Void
	{
		if (!conditions)
			return;

		haxelibs.push(new Haxelib(name, version));
	}

	public function addHaxeDefine(name:String, value:String = '', conditions:Bool = true):Void
	{
		if (!conditions)
			return;

		haxedefs.set(name, value);
	}

	public function addHaxeFlag(name:String, conditions:Bool = true):Void
	{
		if (!conditions)
			return;

		haxeflags.push(name);
	}

	public function addIcon(path:String, ?size:Int):Void
	{
		icons.push(new Icon(path, size));
	}
}
